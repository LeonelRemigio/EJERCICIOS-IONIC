<div class=" canvas sky" [ @skyState]=" state" >
<div class=" celestial sun" [ @flyInOut] * ngIf=" state ===
'day'" ( click)=" toogleState()" ></div>
<div class=" celestial moon" [ @flyInOut] * ngIf=" state ===
' night'" ( click)=" toogleState()" ></div>
<div # landscape class=" landscape" ></div>
</div>
-------------------------------------

page-home { ... }
. celestial{ ... }
. landscape { position: fixed; height: 100 vh;
width: calc(100 vh*1024/373);
// El tamano de la imagen es 1024*373 , asi que
calculamos la relacion alto entre ancho
background-image: url(../ assets/ landscape/ landscape.png);
background-size: auto 100 ;
background-repeat: no-repeat; pointer-events: none;
}
}
--------------------------------------------------
export class HomePage implements AfterViewInit {
/* Resto de variables */
@ViewChild(' landscape') landscapeElement:ElementRef; // nuestro div al que identificamos con el atributo # landscape
maxDeltaX:number; currentDeltaX: number; lastPanDeltaX: number = 0;

ngAfterViewInit() {
this.currentDeltaX = this.maxDeltaX / 2; // Aprovechamos para centrar el terreno al iniciar.
}
-------------------------------------------------
<div class=" canvas sky" [@skyState]=" state" ( pan)=" panEvent(\$event)"
>
<div class=" celestial sun" [@flyInOut] * ngIf=" state === 'day'" ( click)=" toogleState()" ></div>
<div class=" celestial moon" [@flyInOut] * ngIf=" state === ' night'" ( click)=" toogleState()" ></div>
<div # landscape class=" landscape" ></div>
</div>
--------------------------------
panEvent(e) {
if ( e.eventType == 4) { this.lastPanDeltaX = 0; return true;
};
var dx = e.deltaX - this.lastPanDeltaX; this.lastPanDeltaX = e.deltaX;

if (( this.currentDeltaX + dx) < this.maxDeltaX || ( this.currentDeltaX + dx) > 0) {
return true;
}
this.currentDeltaX += dx;

return true;
}
<div [ style.CSS_PROPERTY_NAME]=" VARIABLE " ></div>
---------------------------------------
import { Pipe , PipeTransform } from '@angular/ core';
import { DomSanitizer } from '@angular/ platform-browser';

@Pipe({ name: ' transform_sanitizer'})
export class TransformSanitizer implements PipeTransform { constructor( private sanitizer:DomSanitizer){}
transform( deltaX) {
return this.sanitizer.bypassSecurityTrustStyle(" translateX(" + deltaX + " px)");
}
}
<div class=" canvas sky" [@skyState]=" state" ( pan)=" panEvent(\$event)"
>
<div class=" celestial sun" [@flyInOut] * ngIf=" state === 'day'" ( click)=" toogleState()" ></div>
<div class=" celestial moon" [@flyInOut] * ngIf=" state === ' night'" ( click)=" toogleState()" ></div>
<div # landscape [ style.transform]=" currentDeltaX | transform_sanitizer" class=" landscape" ></div>
</div>
